{"version":3,"file":"static/js/140.d09ea82e.chunk.js","mappings":"mRAAO,MAAMA,EAAuBC,IAClC,OAAQA,GACN,IAAK,IACH,MAAO,UACT,IAAK,IACH,MAAO,UACT,IAAK,IACH,MAAO,UACT,IAAK,MACH,MAAO,mDAET,QACE,MAAO,UACX,E,cCbK,MAAMC,EAAcA,CAACC,EAAGC,KAC7B,MAAMC,EAAQ,sBAEP,CAAEC,EAAOC,GAAWJ,EAAEK,KAAKC,MAAMJ,IAAU,IAC3C,CAAEK,EAAOC,GAAWP,EAAEI,KAAKC,MAAMJ,IAAU,GAG5CO,EAAiBN,EAAMO,cAAcH,GAC3C,OAAuB,IAAnBE,EACKA,EAIFE,SAASP,EAAS,IAAMO,SAASH,EAAS,GAAG,E,uBCFtD,MAmMA,EAnMgBI,IAA8B,IAA7B,QAAEC,EAAO,WAAEC,GAAYF,EACtC,MAAM,OACJG,EAAM,SACNC,EAAQ,aACRC,EAAY,kBACZC,EAAiB,UACjBC,EAAS,WACTC,EAAU,gBACVC,GACER,GACGS,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAE1BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GAkDvC,OAhDAG,EAAAA,EAAAA,YAAU,KACR,MAAMC,GAAiBC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,QAEhCC,GAAcC,EAAAA,EAAAA,IAAWJ,GAAgBK,IAC7C,MAKMC,EALWD,EAASE,KAAKC,KAAIC,IAAG,CACpCC,GAAID,EAAIC,MACLD,EAAIE,WAGqBC,QAAOC,IACnC,MAAMC,EAAgBD,EAAIpC,KAAKsC,SAAS5B,GAClC6B,GAAc5B,GAAWyB,EAAII,OAAS7B,EACtC8B,GAA0B7B,GAC5BwB,EAAIxB,eAAiBA,EAEnB8B,GAAwB7B,IACA,IAA1BuB,EAAIvB,kBAEF8B,GAAgB7B,IAA8B,IAAlBsB,EAAItB,UAChC8B,GAAiB7B,IAAgC,IAAnBqB,EAAIrB,WAClC8B,GAAsB7B,IACA,IAAxBoB,EAAIpB,gBAER,OACEqB,GACAE,GACAG,GACAC,GACAF,GACAG,GACAC,CAAmB,IAGvB3B,EAAQW,GACRR,GAAW,EAAM,IAGnB,MAAO,IAAMK,GAAa,GACzB,CACDf,EACAC,EACAC,EACAC,EACAJ,EACAK,EACAC,IAGKP,GACLqC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,GAAI,EACJC,EAAG,OACHC,gBAAiB,CACfC,KAAM,iBACNC,GAAI,iBACJC,GAAI,mBAENC,IAAK,CAAEH,KAAM,EAAGC,GAAI,EAAGC,GAAI,GAC3BE,KAAM,EACNC,SAAS,OACT/D,MAAO,CAAEgE,eAAgB,QAASC,SAEjCzC,EACE0C,MAAK,CAAChE,EAAGC,IAAMF,EAAYC,EAAGC,KAC9BmC,KAAIK,IACHU,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAAcC,GAAE,SAAAC,OAAW1B,EAAIH,IAAKyB,UACvCK,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHf,EAAG,OACHgB,cAAc,SACdC,WAAW,SACXC,QAAQ,gBACRb,IAAK,EACLc,EAAG,CAAEjB,KAAM,EAAGC,GAAI,GAClBiB,YAAa,EACbC,aAAa,KACbC,UAAU,KACVC,GAAIhF,EAAqB4C,EAAIxB,cAAc8C,SAAA,EAG3CZ,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAACC,WAAW,OAAOC,SAAU,GAAGjB,SAClCtB,EAAIpC,QAGP+D,EAAAA,EAAAA,MAACa,EAAAA,EAAG,CAACC,QAAQ,OAAOvB,IAAK,EAAEI,SAAA,EAEzBZ,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACgC,EAAAA,IAAW,CACVC,MAAO3C,EAAIvB,kBAAoB,QAAU,UAI5C,eAAgBuB,IACfU,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACkC,EAAAA,IAAY,CAACD,MAAO3C,EAAIrB,WAAa,QAAU,WAIpD+B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACmC,EAAAA,IAAK,CAACF,MAAO3C,EAAItB,UAAY,QAAU,UAGzC,oBAAqBsB,IACpBU,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACoC,EAAAA,IAAW,CACVH,MAAO3C,EAAIpB,gBAAkB,QAAU,iBAvCxCoB,EAAIH,SAiDrBa,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,GAAI,EACJC,EAAG,OACHC,gBAAiB,CAAEC,KAAM,iBAAkBC,GAAI,kBAC/CE,IAAK,CAAEH,KAAM,EAAGC,GAAI,GACpBG,KAAM,EACNC,SAAS,OACT/D,MAAO,CAAEgE,eAAgB,QAASC,SAEjCzC,EACE0C,MAAK,CAAChE,EAAGC,IAAMF,EAAYC,EAAGC,KAC9BmC,KAAIK,IACHU,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAAcC,GAAE,SAAAC,OAAW1B,EAAIH,IAAKyB,UACvCK,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHf,EAAG,OACHiB,WAAW,SACXC,QAAQ,gBACRb,IAAK,EACLc,EAAG,CAAEjB,KAAM,EAAGC,GAAI,GAClBiB,YAAa,EACbC,aAAa,KACbC,UAAU,KACVC,GAAIhF,EAAqB4C,EAAIxB,cAAc8C,SAAA,EAG3CZ,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAACC,WAAW,OAAOC,SAAS,KAAIjB,SAClCtB,EAAIpC,QAGP+D,EAAAA,EAAAA,MAACa,EAAAA,EAAG,CAACC,QAAQ,OAAOvB,IAAK,EAAEI,SAAA,EAEzBZ,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACgC,EAAAA,IAAW,CACVC,MAAO3C,EAAIvB,kBAAoB,QAAU,UAI5C,eAAgBuB,IACfU,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACkC,EAAAA,IAAY,CAACD,MAAO3C,EAAIrB,WAAa,QAAU,WAIpD+B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACmC,EAAAA,IAAK,CAACF,MAAO3C,EAAItB,UAAY,QAAU,UAGzC,oBAAqBsB,IACpBU,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACoC,EAAAA,IAAW,CACVH,MAAO3C,EAAIpB,gBAAkB,QAAU,WAM7C8B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAASiB,GAAI,EAAEzB,UAC5CZ,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAACE,SAAU,GAAGjB,SAAEtB,EAAIxB,wBA7CtBwB,EAAIH,OAoDtB,E,gKClLH,MAqKA,EArKoB1B,IAmBb,IAnBc,oBACnB6E,EAAmB,uBACnBC,EAAsB,OACtB3E,EAAM,UACN4E,EAAS,SACT3E,EAAQ,YACR4E,EAAW,kBACX1E,EAAiB,qBACjB2E,EAAoB,UACpB1E,EAAS,aACT2E,EAAY,qBACZC,EAAoB,WACpBjF,EAAU,cACVkF,EAAa,WACb5E,EAAU,cACV6E,EAAa,gBACb5E,EAAe,mBACf6E,EAAkB,mBAClBC,GACDvF,EACC,MAAMwF,EAAevD,IACnB+C,EAAY/C,EAAK,EAGnB,OACEuB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACV,IAAK,EAAG0C,SAAS,SAASC,OAAO,IAAIC,cAAc,OAAO1B,GAAG,OAAMd,SAAA,EACvEZ,EAAAA,EAAAA,KAACqD,EAAAA,EAAU,CACTpB,MAAM,UACNqB,MAAMtD,EAAAA,EAAAA,KAACuD,EAAAA,IAAM,IACbC,QAASA,IAAMR,GAAmB,GAClC,aAAW,sBACXE,SAAS,cAIXjC,EAAAA,EAAAA,MAACwC,EAAAA,EAAU,CAAA7C,SAAA,EACTZ,EAAAA,EAAAA,KAAC0D,EAAAA,EAAgB,CAACC,cAAc,OAAM/C,UACpCZ,EAAAA,EAAAA,KAAC4D,EAAAA,IAAQ,CAAC3B,MAAM,gBAElBjC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAK,CACJ1D,EAAG,CAAEE,KAAM,OAAQC,GAAI,QAASC,GAAI,SACpCuD,MAAOlG,EACPmG,SAAUC,IACRxB,EAAUwB,EAAEC,OAAOH,MAAMI,cAAc,EAEzCC,YAAY,eAIhBnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAgB,CAACzG,WAAYA,EAAYkF,cAAeA,KAEzD5B,EAAAA,EAAAA,MAACa,EAAAA,EAAG,CAACC,QAAS,CAAE1B,KAAM,OAAQE,GAAI,QAAUC,IAAK,EAAEI,SAAA,EAGjDZ,EAAAA,EAAAA,KAACqD,EAAAA,EAAU,CACTC,KAAMhB,GAAsBtC,EAAAA,EAAAA,KAACqE,EAAAA,IAAW,KAAMrE,EAAAA,EAAAA,KAACsE,EAAAA,IAAQ,IACvDd,QAASA,KAEHjB,GADJD,EAEgC,EAElC,aAAW,mBACXY,SAAS,cAEXlD,EAAAA,EAAAA,KAACqD,EAAAA,EAAU,CACT3B,GAAG,UACHO,MAAM,QACNsC,OAAQ,CAAE7C,GAAI,WACd4B,MAAMtD,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,IACdhB,QAASA,IAAMZ,GAAqB,GACpC,aAAW,sBACXM,SAAS,iBAGblD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAS,CAAE1B,KAAM,OAAQE,GAAI,SAAUK,UAC1CK,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACV,IAAK,EAAGiE,MAAM,SAAQ7D,SAAA,EAE1BK,EAAAA,EAAAA,MAACyD,EAAAA,EAAI,CAAA9D,SAAA,EACHZ,EAAAA,EAAAA,KAAC2E,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQC,WAAW9E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAe,IAAK5E,EAAE,OAAMS,SAC7D/C,GAAY,UAEfoD,EAAAA,EAAAA,MAAC+D,EAAAA,EAAQ,CAACC,KAAK,OAAMrE,SAAA,EACnBZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC1B,QAASA,IAAMP,EAAa,IAAIrC,SAAC,SAC1CuE,EAAAA,UAAUlG,KAAI,CAACmG,EAASC,KACvBrF,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAa1B,QAASA,IAAMP,EAAamC,GAASxE,SACxDwE,GADYC,YAOrBpE,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACuD,MAAM,SAAQ7D,SAAA,EAClBZ,EAAAA,EAAAA,KAACsF,EAAAA,EAAI,CACHV,GAAI5C,EAAAA,IACJuD,QAAS,EACTC,GAAI,EACJvD,MAAOlE,EAAoB,YAAc,cAE3CiC,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CACLC,YAAY,QACZC,UAAW5H,EACXgG,SAAUA,IAAMrB,GAAsB3E,SAI1CkD,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACuD,MAAM,SAAQ7D,SAAA,EAClBZ,EAAAA,EAAAA,KAACsF,EAAAA,EAAI,CACHV,GAAI1C,EAAAA,IACJqD,QAAS,EACTC,GAAI,EACJvD,MAAOhE,EAAa,YAAc,cAEpC+B,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CACLC,YAAY,QACZC,UAAW1H,EACX8F,SAAUA,IAAMjB,GAAe7E,SAKnCgD,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACuD,MAAM,SAAQ7D,SAAA,EAClBZ,EAAAA,EAAAA,KAACsF,EAAAA,EAAI,CACHV,GAAIzC,EAAAA,IACJoD,QAAS,EACTC,GAAI,EACJvD,MAAOjE,EAAY,YAAc,cAEnCgC,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CACLC,YAAY,QACZC,UAAW3H,EACX+F,SAAUA,IAAMpB,GAAc3E,SAKlCiD,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACuD,MAAM,SAAQ7D,SAAA,EAClBZ,EAAAA,EAAAA,KAACsF,EAAAA,EAAI,CACHV,GAAIxC,EAAAA,IACJmD,QAAS,EACTC,GAAI,EACJvD,MAAO/D,EAAkB,YAAc,cAEzC8B,EAAAA,EAAAA,KAACyF,EAAAA,EAAM,CACLC,YAAY,QACZC,UAAWzH,EACX6F,SAAUA,IAAMhB,GAAoB7E,SAKxC8B,EAAAA,EAAAA,KAAC6E,EAAAA,EAAM,CACLe,UAAU5F,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,IAClB9C,GAAG,UACHO,MAAM,QACNsC,OAAQ,CAAE7C,GAAI,WACd8B,QAASA,IAAMZ,GAAqB,GAAMhC,SAC3C,4BAKA,E,0ECjLX,MAkKA,EAlKuBnD,IAAgC,IAA/B,SAAEoI,EAAQ,YAAEC,GAAarI,EAC/C,MAAOsI,EAASC,IAAc3H,EAAAA,EAAAA,UAAS,IACjC4H,GAAeC,EAAAA,EAAAA,QAAO,MAC5BC,QAAQC,IAAI,UAAWL,IAEvBvH,EAAAA,EAAAA,YAAU,KACR,MAAM6H,EAAYJ,EAAaK,QAE3BD,IACFA,EAAU1J,MAAMuG,SAAW,WAC3BmD,EAAU1J,MAAMoF,QAAU,eAC5B,GACC,KAEHvD,EAAAA,EAAAA,YAAU,KA0BJsH,GAAeA,EAAYS,OAAS,GAzBtBC,WAChB,IACEL,QAAQC,IAAI,cAAeN,GAG3B,MAAMW,QAAoBC,QAAQC,IAChCb,EAAY7G,KAAIuH,UACd,MAAMI,EAAeC,EAAWC,YAAYC,QAAQ,OAAQ,IACtDC,QAAeC,EAAAA,EAAAA,cAAaL,GAGlC,OAAII,EACK,CAAE5H,KAAM4H,EAAQH,cAElB,IAAI,KAKfb,EAAWS,EAAYpH,QAAO6H,GAAiB,OAATA,IACxC,CAAE,MAAOC,GACPhB,QAAQgB,MAAM,2BAA4BA,EAC5C,GAIAC,EACF,GACC,CAACtB,IAQJ,OACE7E,EAAAA,EAAAA,MAACa,EAAAA,EAAG,CAACuF,IAAKpB,EAAarF,SAAA,EAErBZ,EAAAA,EAAAA,KAAA,OACEsH,IAAKzB,EACL0B,IAAI,YACJ5K,MAAO,CACL6K,SAAU,OACVC,UAAW,OACX1F,QAAS,QACTP,aAAc,SAKjBuE,EAAQ9G,KAAI,CAACK,EAAK+F,KAAW,IAADqC,EAAAC,EAC3BxB,QAAQC,IAAI,MAAO9G,GACnB,MAAMsI,EAAc,OAAHtI,QAAG,IAAHA,GAAe,QAAZoI,EAAHpI,EAAKuH,kBAAU,IAAAa,GAAc,QAAdC,EAAfD,EAAiBG,oBAAY,IAAAF,OAA1B,EAAHA,EAA+BC,SAEhD,IAAKA,EAAU,OAAO5H,EAAAA,EAAAA,KAAA,SAAUqF,GAGhC,MAAMyC,EAAOF,EAAS,GAAGG,EACnBC,EAAMJ,EAAS,GAAGK,EAClBC,EAAQN,EAAS,GAAGG,EAAIH,EAAS,GAAGG,EACpCI,EAASP,EAAS,GAAGK,EAAIL,EAAS,GAAGK,EAErCG,EAjCcR,KACxB,MAAMS,EAAKT,EAAS,GAAGG,EAAIH,EAAS,GAAGG,EACjCO,EAAKV,EAAS,GAAGK,EAAIL,EAAS,GAAGK,EACvC,OAA6B,IAArBM,KAAKC,MAAMF,EAAID,GAAaE,KAAKE,EAAE,EA8BtBC,CAAkBd,GAEnC,OACE5H,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAEHC,GAAE,SAAAC,OAAW1B,EAAIF,KAAKD,IACtByB,UAEAZ,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CACFoB,SAAS,WACT4E,KAAI,GAAA9G,OAAK8G,EAAI,MACbE,IAAG,GAAAhH,OAAKgH,EAAG,MACXE,MAAK,GAAAlH,OAAKkH,EAAK,MACfC,OAAM,GAAAnH,OAAKmH,EAAM,MACjBQ,UAAS,UAAA3H,OAAYoH,EAAQ,QAC7BQ,WAAW,2BACXC,OAAM,aAAA7H,OAAetE,EACnB4C,EAAIF,KAAKtB,eAEXgL,QAAQ,MAERC,iBAAiB,MACjBC,wBAAwB,MACxB7F,OAAQ,GACRzB,GAAG,cAAad,UAEhBK,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHf,EAAG,cACHiB,WAAW,SACXC,QAAQ,gBACRb,IAAK,EACL0C,SAAS,WACT8E,IAAI,QACJiB,MAAM,OACNvH,GAAIhF,EAAqB4C,EAAIF,KAAKtB,cAClCwD,EAAE,MACF4H,gBAAiB,MAAMtI,SAAA,EAGvBK,EAAAA,EAAAA,MAACU,EAAAA,EAAI,CACHC,WAAW,OACXC,SAAU,GACVjB,SAAA,CAECtB,EAAIF,KAAKlC,KAAK,KAAGoC,EAAIF,KAAKtB,aAAa,QAG1CmD,EAAAA,EAAAA,MAACa,EAAAA,EAAG,CAACC,QAAQ,OAAOvB,IAAK,EAAEI,SAAA,EAEzBZ,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACgC,EAAAA,IAAW,CACVC,MAAO3C,EAAIF,KAAKrB,kBAAoB,QAAU,UAIjD,eAAgBuB,EAAIF,OACnBY,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACkC,EAAAA,IAAY,CACXD,MAAO3C,EAAIF,KAAKnB,WAAa,QAAU,WAK7C+B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACmC,EAAAA,IAAK,CAACF,MAAO3C,EAAIF,KAAKpB,UAAY,QAAU,UAG9C,oBAAqBsB,EAAIF,OACxBY,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAQ,OAAOX,WAAW,SAAQR,UACrCZ,EAAAA,EAAAA,KAACoC,EAAAA,IAAW,CACVH,MAAO3C,EAAIF,KAAKlB,gBAAkB,QAAU,mBAlEnDmH,EAyEA,MAvGe,MA0GtB,E,qBClKV,MA2GA,EA3GmB5H,IAAuB,IAAtB,aAAE0L,GAAc1L,EAClC,MAAM2L,GAAYlD,EAAAA,EAAAA,QAAO,OAClBmD,EAAOC,IAAYjL,EAAAA,EAAAA,UAAS,OAC5ByH,EAAayD,IAAkBlL,EAAAA,EAAAA,UAAS,MAoD/C,OACE2B,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CACHG,QAAQ,SACRoD,MAAM,SACN0D,OAAQ,CACN9H,KAAM,sBACNC,GAAI,uBAEN4C,SAAS,WAAUtC,SAEjByI,GAsBApI,EAAAA,EAAAA,MAAAuI,EAAAA,SAAA,CAAA5I,SAAA,EACEZ,EAAAA,EAAAA,KAACyJ,EAAc,CAAC5D,SAAUwD,EAAOvD,YAAaA,KAC9C9F,EAAAA,EAAAA,KAAA,UACEwD,QAASA,IAAM8F,EAAS,MACxB3M,MAAO,CACLuG,SAAU,WACVwG,OAAQ,OACRxB,MAAO,OACPC,OAAQ,OACR3G,aAAc,OACdmI,gBAAiB,OACjBlI,UAAW,oCAhCjBR,EAAAA,EAAAA,MAAAuI,EAAAA,SAAA,CAAA5I,SAAA,EACEZ,EAAAA,EAAAA,KAAC4J,IAAM,CACLC,OAAO,EACPxC,IAAK+B,EACLU,iBAnBe,CACvBC,WAAY,eAmBJC,iBAAiB,aACjBrN,MAAO,CAAE6K,SAAU,OAAQC,UAAW,OAAQjG,aAAc,UAE9DxB,EAAAA,EAAAA,KAAA,UACEwD,QAtEWgD,UACnB,MAAMX,EAAWuD,EAAU9C,QAAQ2D,gBACnCX,EAASzD,GAGT,IAAK,IAADqE,EACF,MAAMC,QAAiBC,MAAM,wDAADpJ,OAC8BqJ,2CACxD,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAU,CACR,CACEtB,MAAO,CACLuB,QAAS/E,EAASgF,MAAM,KAAK,IAE/BC,SAAU,CACR,CACEpL,KAAM,yBASdsH,QAAemD,EAASY,OAC9B5E,QAAQC,IAAI,SAAUY,GAEtB,MAAOgE,KAAMC,GAAwB,OAANjE,QAAM,IAANA,GAAoB,QAAdkD,EAANlD,EAAQkE,UAAU,UAAE,IAAAhB,OAAd,EAANA,EAAsBiB,gBAC/CvE,EAAeqE,EACjBA,EAAehM,KAAIpC,GAAC,GAAAmE,OAAOnE,EAAEiK,YAAW,QACxC,2GACJX,QAAQC,IAAI,eAAgBQ,GAC5B2C,EAAe0B,GACf9B,EAAavC,EACf,CAAE,MAAOO,GACPhB,QAAQgB,MAAM,yBAA0BA,GACxCiE,MAAM,gOACR,GA4BQzO,MAAO,CACLuG,SAAU,WACVwG,OAAQ,OACRxB,MAAO,OACPC,OAAQ,OACR3G,aAAc,OACdmI,gBAAiB,cAqBpB,EC3DX,EArCkBlM,IAA0B,IAAzB,OAAE4N,EAAM,QAAEC,GAAS7N,EACpC,MAAO8N,EAAcC,IAAmBnN,EAAAA,EAAAA,UAAS,IAcjD,OARAG,EAAAA,EAAAA,YAAU,KACRiN,SAASjB,KAAK7N,MAAM+D,SAAW,SAExB,KACL+K,SAASjB,KAAK7N,MAAM+D,SAAW,EAAE,IAElC,KAEIgL,EAAAA,EAAAA,eACLzK,EAAAA,EAAAA,MAAC0K,EAAAA,GAAK,CACJC,aAAa,gBACbP,OAAQA,EACRC,QAASA,EACTO,KAAK,OACLC,YAAU,EACVC,eAAe,SAAQnL,SAAA,EAEvBZ,EAAAA,EAAAA,KAACgM,EAAAA,EAAY,KACb/K,EAAAA,EAAAA,MAACgL,EAAAA,EAAY,CAACC,GAAI,GAAIhD,gBAAiB,GAAGtI,SAAA,EACxCK,EAAAA,EAAAA,MAACkL,EAAAA,EAAW,CAAAvL,SAAA,CAAC,+BAA6B2K,MAC1CvL,EAAAA,EAAAA,KAACoM,EAAAA,EAAgB,KACjBpM,EAAAA,EAAAA,KAACqM,EAAAA,EAAS,CAAC/K,EAAG,EAAGgL,EAAE,OAAM1L,UACvBZ,EAAAA,EAAAA,KAACuM,EAAU,CAACpD,aA1BKqD,IACvBhB,GAAgBiB,GAAQ,IAAIA,EAAMD,IAAM,YA6BxCf,SAASiB,eAAe,aACzB,E,mCC/BH,MAAMC,G,QAAYC,EAAOC,OAAO/K,EAAAA,GAwPhC,GAtPsBrE,IAef,IAfgB,OACrB4N,EAAM,QACNC,EAAO,SACPzN,EAAQ,YACR4E,EAAW,aACX3E,EAAY,gBACZgP,EAAe,kBACf/O,EAAiB,qBACjB2E,EAAoB,UACpB1E,EAAS,aACT2E,EAAY,WACZ1E,EAAU,cACV6E,EAAa,gBACb5E,EAAe,mBACf6E,GACDtF,EACC,MAAOsP,EAAQC,IAAa3O,EAAAA,EAAAA,UAAS,GAC/B4O,GAAgB/G,EAAAA,EAAAA,WAWtB1H,EAAAA,EAAAA,YAAU,KACR,MAAM0O,EAAqBC,IAEvBF,EAAc3G,UACb2G,EAAc3G,QAAQ8G,SAASD,EAAMlJ,SAEtCqH,GACF,EAGF,OADAG,SAAS4B,iBAAiB,YAAaH,GAChC,KACLzB,SAAS6B,oBAAoB,YAAaJ,EAAmB,CAC9D,GACA,CAAC5B,IA2BJ,OACEtL,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAACC,QAAS,CAAE1B,KAAM,QAASE,GAAI,QAAU8G,IAAK4F,EAAcrM,UA8B9DK,EAAAA,EAAAA,MAAC0L,GAAS,CACRY,QAAS,CAAEvF,IAAK,SAChBwF,QAASnC,EAAS,CAAErD,IAAK,QAAW,CAAEA,IAAK,SAC3CrL,MAAO,CAAEgH,cAAe0H,EAAS,OAAS,QAC1C3K,SAAS,SACTwC,SAAS,WACT8E,IAAI,OACJF,KAAK,IACLI,MAAM,OACNxG,GAAG,QACHyB,OAAO,IACP1B,UAAU,KACVH,EAAG+J,EAAS,EAAI,EAChBoC,aA1DmBzJ,IACvBgJ,EAAUhJ,EAAE0J,QAAQ,GAAGC,QAAQ,EA0D3BC,WAtDiB5J,IACrB,MAAM6J,EAAO7J,EAAE8J,eAAe,GAAGH,QAG7BZ,EAASc,EAAO,IAClBvC,GACF,EAiDIyC,WAAY,CAAE/F,IAAK,CAAEgG,SAAU,IAAOC,QAAS,CAAED,SAAU,KAASpN,SAAA,EAEpEK,EAAAA,EAAAA,MAACiN,EAAAA,EAAM,CAACzJ,MAAM,QAAQ0J,QAAS,EAAEvN,SAAA,EAqC/BK,EAAAA,EAAAA,MAACyD,EAAAA,EAAI,CAAA9D,SAAA,EACHZ,EAAAA,EAAAA,KAAC2E,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQC,WAAW9E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAe,IAAK5E,EAAE,OAAMS,SAC7D/C,GAAY,eAEfoD,EAAAA,EAAAA,MAAC+D,EAAAA,EAAQ,CAAC7E,EAAE,OAAMS,SAAA,EAChBZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC/E,EAAE,OAAOqD,QAASA,IAAMf,EAAY,IAAI7B,SAAC,aAGlDuE,EAAAA,UAAUlG,KAAI,CAACmG,EAASC,KACvBrF,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAa1B,QAASA,IAAMf,EAAY2C,GAASxE,SACvDwE,GADYC,YAOrBpE,EAAAA,EAAAA,MAACyD,EAAAA,EAAI,CAAA9D,SAAA,EACHZ,EAAAA,EAAAA,KAAC2E,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQC,WAAW9E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAe,IAAK5E,EAAE,OAAMS,SAC7D9C,GAAgB,oBAEnBmD,EAAAA,EAAAA,MAAC+D,EAAAA,EAAQ,CAAC7E,EAAE,OAAMS,SAAA,EAChBZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC/E,EAAE,OAAOqD,QAASA,IAAMsJ,EAAgB,IAAIlM,SAAC,cAGvDZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC/E,EAAE,OAAOqD,QAASA,IAAMsJ,EAAgB,KAAKlM,SAAC,OAGxDZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC/E,EAAE,OAAOqD,QAASA,IAAMsJ,EAAgB,KAAKlM,SAAC,OAGxDZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC/E,EAAE,OAAOqD,QAASA,IAAMsJ,EAAgB,KAAKlM,SAAC,OAGxDZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC/E,EAAE,OAAOqD,QAASA,IAAMsJ,EAAgB,OAAOlM,SAAC,SAG1DZ,EAAAA,EAAAA,KAACkF,EAAAA,EAAQ,CAAC/E,EAAE,OAAOqD,QAASA,IAAMsJ,EAAgB,KAAKlM,SAAC,aAM5DZ,EAAAA,EAAAA,KAACoO,GAAAA,EAAQ,CACPlR,KAAK,oBACLyI,UAAW5H,EACXgG,SAAUA,KACRrB,GAAqB2L,IAASA,GAAK,EACnCzN,SACH,iBAIDZ,EAAAA,EAAAA,KAACoO,GAAAA,EAAQ,CACPlR,KAAK,aACLyI,UAAW1H,EACX8F,SAAUA,KACRjB,GAAcuL,IAASA,GAAK,EAC5BzN,SACH,gBAIDZ,EAAAA,EAAAA,KAACoO,GAAAA,EAAQ,CACPlR,KAAK,YACLyI,UAAW3H,EACX+F,SAAUA,IAAMpB,GAAa0L,IAASA,IAAMzN,SAC7C,8BAIDZ,EAAAA,EAAAA,KAACoO,GAAAA,EAAQ,CACPlR,KAAK,kBACLyI,UAAWzH,EACX6F,SAAUA,IAAMhB,GAAmBsL,IAASA,IAAMzN,SACnD,gCAKHZ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAM,CACLyJ,QAAQ,UACRrM,MAAM,QACNiK,GAAI,EACJ/L,EAAE,OACFqD,QAAS8H,EAAQ1K,SAClB,8BAIC,EC7IV,GA1Ga2N,KACX,MAAOjM,EAAqBC,IAA0BlE,EAAAA,EAAAA,WAAS,IACxDmQ,EAAmB5L,IAAwBvE,EAAAA,EAAAA,WAAS,IACpDoQ,EAAiBzL,IAAsB3E,EAAAA,EAAAA,WAAS,IAChDT,EAAQ4E,IAAanE,EAAAA,EAAAA,UAAS,KAC9BR,EAAU4E,IAAepE,EAAAA,EAAAA,UAAS,KAClCN,EAAmB2E,IAAwBrE,EAAAA,EAAAA,WAAS,IACpDL,EAAW2E,IAAgBtE,EAAAA,EAAAA,WAAS,IACpCP,EAAcgP,IAAmBzO,EAAAA,EAAAA,UAAS,KAC1CV,EAAYkF,IAAiBxE,EAAAA,EAAAA,WAAS,IACtCJ,EAAY6E,IAAiBzE,EAAAA,EAAAA,WAAS,IACtCH,EAAiB6E,IAAsB1E,EAAAA,EAAAA,WAAS,GAOvD,OACE4C,EAAAA,EAAAA,MAAAuI,EAAAA,SAAA,CAAA5I,SAAA,EACEZ,EAAAA,EAAAA,KAAC0O,EAAAA,EAAM,CAAA9N,UACLZ,EAAAA,EAAAA,KAAA,SAAAY,SAAO,YAGTZ,EAAAA,EAAAA,KAAC2O,EAAAA,GAAM,KACP1N,EAAAA,EAAAA,MAAC2N,EAAAA,EAAS,CACRzO,EAAG,OACH0O,KAAM,CAAExO,KAAM,OAAQC,GAAI,OAAQC,GAAI,QACtCe,EAAG,EACH4B,SAAS,WACTiF,OAAO,oBACPpG,QAAQ,OACRZ,cAAc,SACdT,SAAS,SAAQE,SAAA,EAEjBZ,EAAAA,EAAAA,KAAC8O,GAAa,CACZzD,OAAQ/I,EACRgJ,QAASA,IAAM/I,GAAuB,GACtC1E,SAAUA,EACV4E,YAAaA,EACb3E,aAAcA,EACdgP,gBAAiBA,EACjB/O,kBAAmBA,EACnB2E,qBAAsBA,EACtB1E,UAAWA,EACX2E,aAAcA,EACd1E,WAAYA,EACZ6E,cAAeA,EACf5E,gBAAiBA,EACjB6E,mBAAoBA,KAEtB/C,EAAAA,EAAAA,KAAC+O,EAAW,CACVzM,oBAAqBA,EACrBC,uBAAwBA,EACxB3E,OAAQA,EACR4E,UAAWA,EACX3E,SAAUA,EACV4E,YAAaA,EACb3E,aAAcA,EACdgP,gBAAiBA,EACjB/O,kBAAmBA,EACnB2E,qBAAsBA,EACtB1E,UAAWA,EACX2E,aAAcA,EACdC,qBAAsBA,EACtBjF,WAAYA,EACZkF,cAAeA,EACf5E,WAAYA,EACZ6E,cAAeA,EACf5E,gBAAiBA,EACjB6E,mBAAoBA,EACpBC,mBAAoBA,KAGtBhD,EAAAA,EAAAA,KAACgP,EAAO,CACNtR,QAAS,CACPE,SACAC,WACAC,eACAC,oBACAE,aACAD,YACAE,mBAEFP,WAAYA,OAIf6Q,IACCxO,EAAAA,EAAAA,KAACiP,EAAAA,EAAY,CACX5D,OAAQmD,EACRlD,QAASA,IAAM1I,GAAqB,GAAOhC,UAE3CZ,EAAAA,EAAAA,KAACkP,EAAAA,EAAU,CAACC,SAhFO3I,gBACnB4I,EAAAA,EAAAA,YAAWC,GACjBzM,GAAqB,EAAM,MAiFxB6L,IACCzO,EAAAA,EAAAA,KAACsP,EAAS,CACRjE,OAAQoD,EACRnD,QAASA,IAAMtI,GAAmB,OAGrC,C","sources":["helpers/getColorDrivingStyle.js","helpers/getSortCars.js","components/CarsBox/CarsBox.js","components/FilterPanel/FilterPanel.js","components/Modals/ModalScan/AnnotatedImage.js","components/Modals/ModalScan/OCRScanner.js","components/Modals/ModalScan/ModalScan.js","components/FilterMobMenu/FilterMobMenu.js","pages/Cars.js"],"sourcesContent":["export const getColorDrivingStyle = style => {\n  switch (style) {\n    case 'A':\n      return '#59c959';\n    case 'B':\n      return '#ecd950';\n    case 'C':\n      return '#ff5151';\n    case 'A/B':\n      return 'linear-gradient(-8deg, #ecd950 45%, #59c959 55%)';\n    case '0':\n    default:\n      return '#e0e0e0';\n  }\n};\n","export const getSortCars = (a, b) => {\n  const regex = /^([a-zA-Z]+)(\\d+)$/; // Розбиває на текстову і числову частини\n\n  const [, textA, numberA] = a.name.match(regex) || [];\n  const [, textB, numberB] = b.name.match(regex) || [];\n\n  // Сортування за текстовою частиною\n  const textComparison = textA.localeCompare(textB);\n  if (textComparison !== 0) {\n    return textComparison;\n  }\n\n  // Сортування за числовою частиною\n  return parseInt(numberA, 10) - parseInt(numberB, 10);\n};\n","import React, { useEffect, useState } from 'react';\nimport { db } from '../../firebase/config';\nimport { collection, onSnapshot } from 'firebase/firestore';\nimport { Box, Text, Grid, Flex } from '@chakra-ui/react';\nimport { FaSnowflake, FaBox } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport { getColorDrivingStyle } from 'helpers/getColorDrivingStyle';\nimport { GiHotSurface } from 'react-icons/gi';\nimport { getSortCars } from 'helpers/getSortCars';\nimport { MdVolumeOff } from 'react-icons/md';\n\nconst CarsBox = ({ filters, isGridView }) => {\n  const {\n    search,\n    typeCars,\n    drivingStyle,\n    hasAirConditioner,\n    hasFridge,\n    hasHeating,\n    hasSoundProofed,\n  } = filters;\n  const [cars, setCars] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const carsCollection = collection(db, 'cars');\n\n    const unsubscribe = onSnapshot(carsCollection, snapshot => {\n      const carsData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n\n      const filteredCars = carsData.filter(car => {\n        const matchesSearch = car.name.includes(search);\n        const matchesType = typeCars ? car.type === typeCars : true;\n        const matchesTypeDrivingStyle = drivingStyle\n          ? car.drivingStyle === drivingStyle\n          : true;\n        const matchesAirConditioner = hasAirConditioner\n          ? car.hasAirConditioner === true\n          : true;\n        const matchesFridge = hasFridge ? car.hasFridge === true : true;\n        const matchesHeating = hasHeating ? car.hasHeating === true : true;\n        const matchesSoundProofed = hasSoundProofed\n          ? car.hasSoundProofed === true\n          : true;\n        return (\n          matchesSearch &&\n          matchesType &&\n          matchesAirConditioner &&\n          matchesFridge &&\n          matchesTypeDrivingStyle &&\n          matchesHeating &&\n          matchesSoundProofed\n        );\n      });\n      setCars(filteredCars);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [\n    typeCars,\n    drivingStyle,\n    hasAirConditioner,\n    hasFridge,\n    search,\n    hasHeating,\n    hasSoundProofed,\n  ]);\n\n  return isGridView ? (\n    <Grid\n      pb={4}\n      w={'100%'}\n      templateColumns={{\n        base: 'repeat(4, 1fr)',\n        md: 'repeat(6, 1fr)',\n        xl: 'repeat(10, 1fr)',\n      }}\n      gap={{ base: 1, md: 6, xl: 2 }}\n      flex={1}\n      overflow=\"auto\"\n      style={{ scrollbarWidth: 'none' }}\n    >\n      {cars\n        .sort((a, b) => getSortCars(a, b))\n        .map(car => (\n          <Link key={car.id} to={`/cars/${car.id}`}>\n            <Flex\n              w={'100%'}\n              flexDirection=\"column\"\n              alignItems=\"center\"\n              justify=\"space-between\"\n              gap={1}\n              p={{ base: 0, md: 3 }}\n              borderWidth={1}\n              borderRadius=\"md\"\n              boxShadow=\"md\"\n              bg={getColorDrivingStyle(car.drivingStyle)}\n            >\n              {/* Name */}\n              <Text fontWeight=\"bold\" fontSize={14}>\n                {car.name}\n              </Text>\n\n              <Box display=\"flex\" gap={1}>\n                {/* Перемикачі */}\n                <Box display=\"flex\" alignItems=\"center\">\n                  <FaSnowflake\n                    color={car.hasAirConditioner ? 'green' : 'red'}\n                  />\n                </Box>\n\n                {'hasHeating' in car && (\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <GiHotSurface color={car.hasHeating ? 'green' : 'red'} />\n                  </Box>\n                )}\n\n                <Box display=\"flex\" alignItems=\"center\">\n                  <FaBox color={car.hasFridge ? 'green' : 'red'} />\n                </Box>\n\n                {'hasSoundProofed' in car && (\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <MdVolumeOff\n                      color={car.hasSoundProofed ? 'green' : 'red'}\n                    />\n                  </Box>\n                )}\n              </Box>\n            </Flex>\n          </Link>\n        ))}\n    </Grid>\n  ) : (\n    <Grid\n      pb={4}\n      w={'100%'}\n      templateColumns={{ base: 'repeat(1, 1fr)', md: 'repeat(3, 1fr)' }}\n      gap={{ base: 3, md: 6 }}\n      flex={1}\n      overflow=\"auto\"\n      style={{ scrollbarWidth: 'none' }}\n    >\n      {cars\n        .sort((a, b) => getSortCars(a, b))\n        .map(car => (\n          <Link key={car.id} to={`/cars/${car.id}`}>\n            <Flex\n              w={'100%'}\n              alignItems=\"center\"\n              justify=\"space-between\"\n              gap={4}\n              p={{ base: 1, md: 3 }}\n              borderWidth={1}\n              borderRadius=\"md\"\n              boxShadow=\"md\"\n              bg={getColorDrivingStyle(car.drivingStyle)}\n            >\n              {/* Name */}\n              <Text fontWeight=\"bold\" fontSize=\"lg\">\n                {car.name}\n              </Text>\n\n              <Box display=\"flex\" gap={1}>\n                {/* Перемикачі */}\n                <Box display=\"flex\" alignItems=\"center\">\n                  <FaSnowflake\n                    color={car.hasAirConditioner ? 'green' : 'red'}\n                  />\n                </Box>\n\n                {'hasHeating' in car && (\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <GiHotSurface color={car.hasHeating ? 'green' : 'red'} />\n                  </Box>\n                )}\n\n                <Box display=\"flex\" alignItems=\"center\">\n                  <FaBox color={car.hasFridge ? 'green' : 'red'} />\n                </Box>\n\n                {'hasSoundProofed' in car && (\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <MdVolumeOff\n                      color={car.hasSoundProofed ? 'green' : 'red'}\n                    />\n                  </Box>\n                )}\n\n                {/* Іконка для стилю їзди */}\n                <Box display=\"flex\" alignItems=\"center\" px={1}>\n                  <Text fontSize={22}>{car.drivingStyle}</Text>\n                </Box>\n              </Box>\n            </Flex>\n          </Link>\n        ))}\n    </Grid>\n  );\n};\n\nexport default CarsBox;\n","import React from 'react';\nimport {\n  Flex,\n  InputGroup,\n  InputLeftElement,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Button,\n  Icon,\n  Switch,\n  Box,\n  IconButton,\n} from '@chakra-ui/react';\nimport { IoSearch } from 'react-icons/io5';\nimport { ChevronDownIcon, AddIcon } from '@chakra-ui/icons';\nimport { FaSnowflake, FaBox, FaFilter, FaChevronUp } from 'react-icons/fa';\nimport ListViewSwitcher from 'components/ListViewSwitcher/ListViewSwitcher';\nimport { GiHotSurface } from 'react-icons/gi';\nimport { MdVolumeOff } from 'react-icons/md';\nimport { IoScan } from 'react-icons/io5';\nimport { TYPES_CAR } from 'data';\n\nconst FilterPanel = ({\n  isOpenFilterMobMenu,\n  setIsOpenFilterMobMenu,\n  search,\n  setSearch,\n  typeCars,\n  setTypeCars,\n  hasAirConditioner,\n  setHasAirConditioner,\n  hasFridge,\n  setHasFridge,\n  setIsOpenModalAddCar,\n  isGridView,\n  setIsGridView,\n  hasHeating,\n  setHasHeating,\n  hasSoundProofed,\n  setHasSoundProofed,\n  setIsOpenModalScan,\n}) => {\n  const handleSelect = type => {\n    setTypeCars(type);\n  };\n\n  return (\n    <Flex gap={2} position=\"sticky\" zIndex=\"2\" paddingBottom=\"10px\" bg=\"#fff\">\n      <IconButton\n        color=\"#6da305\"\n        icon={<IoScan />}\n        onClick={() => setIsOpenModalScan(true)}\n        aria-label=\"Open Modal Add Cars\"\n        position=\"relative\"\n      />\n\n      {/* Поле пошуку */}\n      <InputGroup>\n        <InputLeftElement pointerEvents=\"none\">\n          <IoSearch color=\"gray.300\" />\n        </InputLeftElement>\n        <Input\n          w={{ base: '100%', md: '300px', xl: '500px' }}\n          value={search}\n          onChange={e => {\n            setSearch(e.target.value.toUpperCase());\n          }}\n          placeholder=\"Search\"\n        />\n      </InputGroup>\n\n      <ListViewSwitcher isGridView={isGridView} setIsGridView={setIsGridView} />\n\n      <Box display={{ base: 'flex', xl: 'none' }} gap={2}>\n        {/* Кнопка для відкриття фільтр-меню */}\n\n        <IconButton\n          icon={isOpenFilterMobMenu ? <FaChevronUp /> : <FaFilter />}\n          onClick={() => {\n            isOpenFilterMobMenu\n              ? setIsOpenFilterMobMenu(false)\n              : setIsOpenFilterMobMenu(true);\n          }}\n          aria-label=\"Open Filter Menu\"\n          position=\"relative\"\n        />\n        <IconButton\n          bg=\"#6da305\"\n          color=\"white\"\n          _hover={{ bg: '#5c8e04' }}\n          icon={<AddIcon />}\n          onClick={() => setIsOpenModalAddCar(true)}\n          aria-label=\"Open Modal Add Cars\"\n          position=\"relative\"\n        />\n      </Box>\n      <Box display={{ base: 'none', xl: 'block' }}>\n        <Flex gap={4} align=\"center\">\n          {/* Вибір типу авто */}\n          <Menu>\n            <MenuButton as={Button} rightIcon={<ChevronDownIcon />} w=\"80px\">\n              {typeCars || 'Type'}\n            </MenuButton>\n            <MenuList minW=\"80px\">\n              <MenuItem onClick={() => handleSelect('')}>Type</MenuItem>\n              {TYPES_CAR.map((typeCar, index) => (\n                <MenuItem key={index} onClick={() => handleSelect(typeCar)}>\n                  {typeCar}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          {/* Перемикач для кондиціонера */}\n          <Flex align=\"center\">\n            <Icon\n              as={FaSnowflake}\n              boxSize={5}\n              mr={2}\n              color={hasAirConditioner ? 'green.500' : 'gray.500'}\n            />\n            <Switch\n              colorScheme=\"green\"\n              isChecked={hasAirConditioner}\n              onChange={() => setHasAirConditioner(!hasAirConditioner)}\n            />\n          </Flex>\n          {/* Перемикач для Topení */}\n          <Flex align=\"center\">\n            <Icon\n              as={GiHotSurface}\n              boxSize={5}\n              mr={2}\n              color={hasHeating ? 'green.500' : 'gray.500'}\n            />\n            <Switch\n              colorScheme=\"green\"\n              isChecked={hasHeating}\n              onChange={() => setHasHeating(!hasHeating)}\n            />\n          </Flex>\n\n          {/* Перемикач для холодильника */}\n          <Flex align=\"center\">\n            <Icon\n              as={FaBox}\n              boxSize={5}\n              mr={2}\n              color={hasFridge ? 'green.500' : 'gray.500'}\n            />\n            <Switch\n              colorScheme=\"green\"\n              isChecked={hasFridge}\n              onChange={() => setHasFridge(!hasFridge)}\n            />\n          </Flex>\n\n          {/* Перемикач для холодильника */}\n          <Flex align=\"center\">\n            <Icon\n              as={MdVolumeOff}\n              boxSize={5}\n              mr={2}\n              color={hasSoundProofed ? 'green.500' : 'gray.500'}\n            />\n            <Switch\n              colorScheme=\"green\"\n              isChecked={hasSoundProofed}\n              onChange={() => setHasSoundProofed(!hasSoundProofed)}\n            />\n          </Flex>\n\n          {/* Кнопка додавання авто */}\n          <Button\n            leftIcon={<AddIcon />}\n            bg=\"#6da305\"\n            color=\"white\"\n            _hover={{ bg: '#5c8e04' }}\n            onClick={() => setIsOpenModalAddCar(true)}\n          >\n            přidat auto\n          </Button>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default FilterPanel;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Box, Flex, Text } from '@chakra-ui/react';\nimport { getCarByName } from 'app';\nimport { getColorDrivingStyle } from 'helpers/getColorDrivingStyle';\nimport { FaBox, FaSnowflake } from 'react-icons/fa';\nimport { GiHotSurface } from 'react-icons/gi';\nimport { MdVolumeOff } from 'react-icons/md';\nimport { Link } from 'react-router-dom';\n\nconst AnnotatedImage = ({ imageSrc, annotations }) => {\n  const [carList, setCarList] = useState([]);\n  const containerRef = useRef(null);\n  console.log('carList', carList);\n\n  useEffect(() => {\n    const container = containerRef.current;\n\n    if (container) {\n      container.style.position = 'relative';\n      container.style.display = 'inline-block';\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('annotations', annotations);\n\n        // Виконуємо запити до Firebase паралельно\n        const dataCarList = await Promise.all(\n          annotations.map(async annotation => {\n            const detectedText = annotation.description.replace(/\\s+/g, ''); // Видаляємо пробіли\n            const result = await getCarByName(detectedText); // Запит до Firebase\n\n            // Повертаємо об'єкт тільки якщо знайдено результат\n            if (result) {\n              return { data: result, annotation };\n            }\n            return null; // Якщо нічого не знайдено, повертаємо null\n          })\n        );\n\n        // Фільтруємо `null`, щоб зберегти тільки валідні результати\n        setCarList(dataCarList.filter(item => item !== null));\n      } catch (error) {\n        console.error('Error fetching car data:', error);\n      }\n    };\n\n    if (annotations && annotations.length > 0) {\n      fetchData(); // Викликаємо асинхронну функцію тільки якщо є анотації\n    }\n  }, [annotations]);\n\n  const calculateRotation = vertices => {\n    const dx = vertices[1].x - vertices[0].x; // Різниця по X\n    const dy = vertices[1].y - vertices[0].y; // Різниця по Y\n    return (Math.atan2(dy, dx) * 180) / Math.PI; // Обчислення кута в градусах\n  };\n\n  return (\n    <Box ref={containerRef} key=\"132\">\n      {/* Відображення зображення */}\n      <img\n        src={imageSrc}\n        alt=\"Annotated\"\n        style={{\n          maxWidth: '100%',\n          maxHeight: '100%',\n          display: 'block',\n          borderRadius: '8px',\n        }}\n      />\n\n      {/* Відображення накладених елементів */}\n      {carList.map((car, index) => {\n        console.log('car', car);\n        const vertices = car?.annotation?.boundingPoly?.vertices;\n\n        if (!vertices) return <div key={index}></div>;\n\n        // Обчислюємо позицію компонента\n        const left = vertices[0].x; // x координата верхнього лівого кута\n        const top = vertices[0].y; // y координата верхнього лівого кута\n        const width = vertices[1].x - vertices[0].x; // Різниця між x правого і лівого кута\n        const height = vertices[2].y - vertices[0].y;\n\n        const rotation = calculateRotation(vertices);\n\n        return (\n          <Link\n            key={index}\n            to={`/cars/${car.data.id}`}\n            // onClick={() => setTimeout(() => onClose(), 100)}\n          >\n            <Box\n              position=\"absolute\"\n              left={`${left}px`}\n              top={`${top}px`}\n              width={`${width}px`}\n              height={`${height}px`}\n              transform={`rotate(${rotation}deg)`}\n              background=\"rgba(255, 255, 255, 0.8)\"\n              border={`2px solid ${getColorDrivingStyle(\n                car.data.drivingStyle\n              )}`}\n              padding=\"8px\"\n              // borderRadius=\"8px\"\n              borderLeftRadius=\"8px\"\n              borderBottomRightRadius=\"8px\"\n              zIndex={10}\n              bg=\"transparent\"\n            >\n              <Flex\n                w={'fit-content'}\n                alignItems=\"center\"\n                justify=\"space-between\"\n                gap={1}\n                position=\"absolute\"\n                top=\"-28px\"\n                right=\"-2px\"\n                bg={getColorDrivingStyle(car.data.drivingStyle)}\n                p=\"3px\"\n                borderTopRadius={'3px'}\n              >\n                {/* Name */}\n                <Text\n                  fontWeight=\"bold\"\n                  fontSize={14}\n                  // color={getColorDrivingStyle(car.data.drivingStyle)}\n                >\n                  {car.data.name} ({car.data.drivingStyle})\n                </Text>\n\n                <Box display=\"flex\" gap={1}>\n                  {/* Перемикачі */}\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <FaSnowflake\n                      color={car.data.hasAirConditioner ? 'green' : 'red'}\n                    />\n                  </Box>\n\n                  {'hasHeating' in car.data && (\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <GiHotSurface\n                        color={car.data.hasHeating ? 'green' : 'red'}\n                      />\n                    </Box>\n                  )}\n\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <FaBox color={car.data.hasFridge ? 'green' : 'red'} />\n                  </Box>\n\n                  {'hasSoundProofed' in car.data && (\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <MdVolumeOff\n                        color={car.data.hasSoundProofed ? 'green' : 'red'}\n                      />\n                    </Box>\n                  )}\n                </Box>\n              </Flex>\n            </Box>\n          </Link>\n        );\n      })}\n    </Box>\n  );\n};\n\nexport default AnnotatedImage;\n","import { Flex } from '@chakra-ui/react';\nimport React, { useRef, useState } from 'react';\nimport AnnotatedImage from './AnnotatedImage';\nimport Webcam from 'react-webcam';\n\nconst OCRScanner = ({ onRecognized }) => {\n  const webcamRef = useRef(null);\n  const [image, setImage] = useState(null);\n  const [annotations, setAnnotations] = useState(null);\n\n  const capturePhoto = async () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImage(imageSrc);\n\n    // Викликаємо Vision API\n    try {\n      const response = await fetch(\n        `https://vision.googleapis.com/v1/images:annotate?key=${process.env.REACT_APP_CLOUD_VISION_API_KEY}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            requests: [\n              {\n                image: {\n                  content: imageSrc.split(',')[1], // Відокремлюємо Base64-контент\n                },\n                features: [\n                  {\n                    type: 'TEXT_DETECTION', // Використовуємо розпізнавання тексту\n                  },\n                ],\n              },\n            ],\n          }),\n        }\n      );\n\n      const result = await response.json();\n      console.log('result', result);\n      // eslint-disable-next-line no-unused-vars\n      const [_, ...newAnnotations] = result?.responses[0]?.textAnnotations;\n      const detectedText = newAnnotations\n        ? newAnnotations.map(a => `${a.description}, `)\n        : 'Текст не розпізнано';\n      console.log('detectedText', detectedText);\n      setAnnotations(newAnnotations);\n      onRecognized(detectedText);\n    } catch (error) {\n      console.error('Error with Vision API:', error);\n      alert('Сталася помилка при розпізнаванні тексту.');\n    }\n  };\n\n  const videoConstraints = {\n    facingMode: 'environment',\n  };\n\n  return (\n    <Flex\n      justify=\"center\"\n      align=\"center\"\n      height={{\n        base: 'calc(100vh - 140px)',\n        md: 'calc(100vh - 110px)',\n      }}\n      position=\"relative\"\n    >\n      {!image ? (\n        <>\n          <Webcam\n            audio={false}\n            ref={webcamRef}\n            videoConstraints={videoConstraints}\n            screenshotFormat=\"image/jpeg\"\n            style={{ maxWidth: '100%', maxHeight: '100%', borderRadius: '8px' }}\n          />\n          <button\n            onClick={capturePhoto}\n            style={{\n              position: 'absolute',\n              bottom: '10px',\n              width: '50px',\n              height: '50px',\n              borderRadius: '30px',\n              backgroundColor: 'gray',\n            }}\n          ></button>\n        </>\n      ) : (\n        <>\n          <AnnotatedImage imageSrc={image} annotations={annotations} />\n          <button\n            onClick={() => setImage(null)}\n            style={{\n              position: 'absolute',\n              bottom: '10px',\n              width: '50px',\n              height: '50px',\n              borderRadius: '30px',\n              backgroundColor: 'gray',\n              boxShadow: '0px 0px 5px 2px #fff inset',\n            }}\n          ></button>\n        </>\n      )}\n    </Flex>\n  );\n};\n\nexport default OCRScanner;\n","import {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport OCRScanner from './OCRScanner';\n\nconst ModalScan = ({ isOpen, onClose }) => {\n  const [allowedTexts, setAllowedTexts] = useState([]);\n\n  const handleRecognized = text => {\n    setAllowedTexts(pref => [...pref, text]);\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.style.overflow = '';\n    };\n  }, []);\n\n  return createPortal(\n    <Modal\n      motionPreset=\"slideInBottom\"\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"full\"\n      isCentered\n      scrollBehavior=\"inside\"\n    >\n      <ModalOverlay />\n      <ModalContent mt={20} borderTopRadius={20}>\n        <ModalHeader>Real-Time OCR Scanner Text: {allowedTexts}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody p={0} h=\"100%\">\n          <OCRScanner onRecognized={handleRecognized} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>,\n    document.getElementById('modalScan')\n  );\n};\n\nexport default ModalScan;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Box,\n  VStack,\n  Checkbox,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n} from '@chakra-ui/react';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { motion } from 'framer-motion';\nimport { TYPES_CAR } from 'data';\n\nconst MotionBox = motion.create(Box);\n\nconst FilterMobMenu = ({\n  isOpen,\n  onClose,\n  typeCars,\n  setTypeCars,\n  drivingStyle,\n  setDrivingStyle,\n  hasAirConditioner,\n  setHasAirConditioner,\n  hasFridge,\n  setHasFridge,\n  hasHeating,\n  setHasHeating,\n  hasSoundProofed,\n  setHasSoundProofed,\n}) => {\n  const [startY, setStartY] = useState(0);\n  const filterMenuRef = useRef();\n\n  // const activeFilters = [\n  //   typeCars,\n  //   drivingStyle,\n  //   hasAirConditioner,\n  //   hasFridge,\n  //   hasHeating,\n  //   hasSoundProofed,\n  // ].filter(Boolean).length;\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (\n        filterMenuRef.current &&\n        !filterMenuRef.current.contains(event.target)\n      ) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [onClose]);\n\n  // const handleCleanFilter = () => {\n  //   setTypeCars('');\n  //   setDrivingStyle('');\n  //   setHasAirConditioner(null);\n  //   setHasFridge(null);\n  //   setHasHeating(null);\n  //   setHasSoundProofed(null);\n  //   onClose();\n  // };\n\n  // Початок свайпу\n  const handleTouchStart = e => {\n    setStartY(e.touches[0].clientY);\n  };\n\n  // Закінчення свайпу\n  const handleTouchEnd = e => {\n    const endY = e.changedTouches[0].clientY;\n\n    // Якщо рух вгору (координата зменшується), закриваємо меню\n    if (startY - endY > 50) {\n      onClose();\n    }\n  };\n\n  return (\n    <Box display={{ base: 'block', xl: 'none' }} ref={filterMenuRef}>\n      {/* Кнопка для відкриття фільтр-меню */}\n      {/* <Box position=\"relative\">\n        <IconButton\n          icon={isOpen ? <CloseIcon /> : <FaFilter />}\n          onClick={isOpen ? onClose : onOpen}\n          aria-label=\"Open Filter Menu\"\n          position=\"relative\"\n        />\n        {activeFilters > 0 && (\n          <Box\n            position=\"absolute\"\n            top=\"-5px\"\n            right=\"-5px\"\n            fontSize=\"10px\"\n            color=\"white\"\n            bg=\"red.500\"\n            borderRadius=\"full\"\n            width=\"15px\"\n            height=\"15px\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            {activeFilters}\n          </Box>\n        )}\n      </Box> */}\n\n      {/* Фільтр-меню */}\n      <MotionBox\n        initial={{ top: '-100%' }} // Початковий стан\n        animate={isOpen ? { top: '40px' } : { top: '-100%' }}\n        style={{ pointerEvents: isOpen ? 'auto' : 'none' }}\n        overflow=\"hidden\" // Важливо для приховування контенту\n        position=\"absolute\"\n        top=\"40px\"\n        left=\"0\"\n        width=\"100%\"\n        bg=\"white\"\n        zIndex=\"1\"\n        boxShadow=\"md\"\n        p={isOpen ? 4 : 0}\n        onTouchStart={handleTouchStart}\n        onTouchEnd={handleTouchEnd}\n        transition={{ top: { duration: 0.6 }, opacity: { duration: 0.8 } }} // Тривалість анімації\n      >\n        <VStack align=\"start\" spacing={4}>\n          {/* <Box\n            w=\"100%\"\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            ml=\"auto\"\n            position=\"relative\"\n          >\n            <Text>Filtry: </Text>\n            <IconButton\n              size={'md'}\n              icon={<FaFilterCircleXmark />}\n              onClick={handleCleanFilter}\n              aria-label=\"Clear Filter\"\n              position=\"relative\"\n            />\n            {activeFilters > 0 && (\n              <Box\n                position=\"absolute\"\n                top=\"-5px\"\n                right=\"-5px\"\n                fontSize=\"10px\"\n                color=\"white\"\n                bg=\"red.500\"\n                borderRadius=\"full\"\n                width=\"15px\"\n                height=\"15px\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n              >\n                {activeFilters}\n              </Box>\n            )}\n          </Box> */}\n          {/* Вибір типу авто */}\n          <Menu>\n            <MenuButton as={Button} rightIcon={<ChevronDownIcon />} w=\"100%\">\n              {typeCars || 'Typ auta:'}\n            </MenuButton>\n            <MenuList w=\"100%\">\n              <MenuItem w=\"100%\" onClick={() => setTypeCars('')}>\n                Vše\n              </MenuItem>\n              {TYPES_CAR.map((typeCar, index) => (\n                <MenuItem key={index} onClick={() => setTypeCars(typeCar)}>\n                  {typeCar}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          {/* Вибір стилю їзди */}\n          <Menu>\n            <MenuButton as={Button} rightIcon={<ChevronDownIcon />} w=\"100%\">\n              {drivingStyle || 'Styl jízdy:'}\n            </MenuButton>\n            <MenuList w=\"100%\">\n              <MenuItem w=\"100%\" onClick={() => setDrivingStyle('')}>\n                Vše\n              </MenuItem>\n              <MenuItem w=\"100%\" onClick={() => setDrivingStyle('A')}>\n                A\n              </MenuItem>\n              <MenuItem w=\"100%\" onClick={() => setDrivingStyle('B')}>\n                B\n              </MenuItem>\n              <MenuItem w=\"100%\" onClick={() => setDrivingStyle('C')}>\n                C\n              </MenuItem>\n              <MenuItem w=\"100%\" onClick={() => setDrivingStyle('A/B')}>\n                A/B\n              </MenuItem>\n              <MenuItem w=\"100%\" onClick={() => setDrivingStyle('0')}>\n                0\n              </MenuItem>\n            </MenuList>\n          </Menu>\n          {/* Перемикач для кондиціонера */}\n          <Checkbox\n            name=\"hasAirConditioner\"\n            isChecked={hasAirConditioner}\n            onChange={() => {\n              setHasAirConditioner(prev => !prev);\n            }}\n          >\n            Klimatizace\n          </Checkbox>\n          {/* Перемикач для Topení: */}\n          <Checkbox\n            name=\"hasHeating\"\n            isChecked={hasHeating}\n            onChange={() => {\n              setHasHeating(prev => !prev);\n            }}\n          >\n            Topení:\n          </Checkbox>\n          {/* Перемикач для вбудованої системи */}\n          <Checkbox\n            name=\"hasFridge\"\n            isChecked={hasFridge}\n            onChange={() => setHasFridge(prev => !prev)}\n          >\n            Vestavba (lednička)\n          </Checkbox>\n          {/* Перемикач для Odhlučněné */}\n          <Checkbox\n            name=\"hasSoundProofed\"\n            isChecked={hasSoundProofed}\n            onChange={() => setHasSoundProofed(prev => !prev)}\n          >\n            Odhlučněné\n          </Checkbox>\n        </VStack>\n        {/* Tlačítko použití */}\n        <Button\n          bgColor=\"#6da305\"\n          color=\"white\"\n          mt={4}\n          w=\"100%\"\n          onClick={onClose}\n        >\n          Použít filtry\n        </Button>\n      </MotionBox>\n    </Box>\n  );\n};\n\nexport default FilterMobMenu;\n","import { Container } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport ModalWrapper from 'components/Modals/Modal';\nimport AddCarForm from 'components/AddCarForm/AddCarForm';\nimport { addsNewCar } from 'app';\nimport CarsBox from 'components/CarsBox/CarsBox';\nimport FilterPanel from 'components/FilterPanel/FilterPanel';\nimport ModalScan from 'components/Modals/ModalScan/ModalScan';\nimport { Outlet } from 'react-router-dom';\nimport FilterMobMenu from 'components/FilterMobMenu/FilterMobMenu';\n\nconst Cars = () => {\n  const [isOpenFilterMobMenu, setIsOpenFilterMobMenu] = useState(false);\n  const [isOpenModalAddCar, setIsOpenModalAddCar] = useState(false);\n  const [isOpenModalScan, setIsOpenModalScan] = useState(false);\n  const [search, setSearch] = useState('');\n  const [typeCars, setTypeCars] = useState('');\n  const [hasAirConditioner, setHasAirConditioner] = useState(false);\n  const [hasFridge, setHasFridge] = useState(false);\n  const [drivingStyle, setDrivingStyle] = useState('');\n  const [isGridView, setIsGridView] = useState(false);\n  const [hasHeating, setHasHeating] = useState(false);\n  const [hasSoundProofed, setHasSoundProofed] = useState(false);\n\n  const handleSubmitAddCar = async formData => {\n    await addsNewCar(formData);\n    setIsOpenModalAddCar(false);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Cars</title>\n      </Helmet>\n\n      <Outlet />\n      <Container\n        w={'100%'}\n        maxW={{ base: '100%', md: '95vw', xl: '80vw' }}\n        p={0}\n        position=\"relative\"\n        height=\"calc(100% - 65px)\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        overflow=\"hidden\"\n      >\n        <FilterMobMenu\n          isOpen={isOpenFilterMobMenu}\n          onClose={() => setIsOpenFilterMobMenu(false)}\n          typeCars={typeCars}\n          setTypeCars={setTypeCars}\n          drivingStyle={drivingStyle}\n          setDrivingStyle={setDrivingStyle}\n          hasAirConditioner={hasAirConditioner}\n          setHasAirConditioner={setHasAirConditioner}\n          hasFridge={hasFridge}\n          setHasFridge={setHasFridge}\n          hasHeating={hasHeating}\n          setHasHeating={setHasHeating}\n          hasSoundProofed={hasSoundProofed}\n          setHasSoundProofed={setHasSoundProofed}\n        />\n        <FilterPanel\n          isOpenFilterMobMenu={isOpenFilterMobMenu}\n          setIsOpenFilterMobMenu={setIsOpenFilterMobMenu}\n          search={search}\n          setSearch={setSearch}\n          typeCars={typeCars}\n          setTypeCars={setTypeCars}\n          drivingStyle={drivingStyle}\n          setDrivingStyle={setDrivingStyle}\n          hasAirConditioner={hasAirConditioner}\n          setHasAirConditioner={setHasAirConditioner}\n          hasFridge={hasFridge}\n          setHasFridge={setHasFridge}\n          setIsOpenModalAddCar={setIsOpenModalAddCar}\n          isGridView={isGridView}\n          setIsGridView={setIsGridView}\n          hasHeating={hasHeating}\n          setHasHeating={setHasHeating}\n          hasSoundProofed={hasSoundProofed}\n          setHasSoundProofed={setHasSoundProofed}\n          setIsOpenModalScan={setIsOpenModalScan}\n        />\n\n        <CarsBox\n          filters={{\n            search,\n            typeCars,\n            drivingStyle,\n            hasAirConditioner,\n            hasHeating,\n            hasFridge,\n            hasSoundProofed,\n          }}\n          isGridView={isGridView}\n        />\n      </Container>\n\n      {isOpenModalAddCar && (\n        <ModalWrapper\n          isOpen={isOpenModalAddCar}\n          onClose={() => setIsOpenModalAddCar(false)}\n        >\n          <AddCarForm onSubmit={handleSubmitAddCar} />\n        </ModalWrapper>\n      )}\n      {isOpenModalScan && (\n        <ModalScan\n          isOpen={isOpenModalScan}\n          onClose={() => setIsOpenModalScan(false)}\n        ></ModalScan>\n      )}\n    </>\n  );\n};\n\nexport default Cars;\n"],"names":["getColorDrivingStyle","style","getSortCars","a","b","regex","textA","numberA","name","match","textB","numberB","textComparison","localeCompare","parseInt","_ref","filters","isGridView","search","typeCars","drivingStyle","hasAirConditioner","hasFridge","hasHeating","hasSoundProofed","cars","setCars","useState","loading","setLoading","useEffect","carsCollection","collection","db","unsubscribe","onSnapshot","snapshot","filteredCars","docs","map","doc","id","data","filter","car","matchesSearch","includes","matchesType","type","matchesTypeDrivingStyle","matchesAirConditioner","matchesFridge","matchesHeating","matchesSoundProofed","_jsx","Grid","pb","w","templateColumns","base","md","xl","gap","flex","overflow","scrollbarWidth","children","sort","Link","to","concat","_jsxs","Flex","flexDirection","alignItems","justify","p","borderWidth","borderRadius","boxShadow","bg","Text","fontWeight","fontSize","Box","display","FaSnowflake","color","GiHotSurface","FaBox","MdVolumeOff","px","isOpenFilterMobMenu","setIsOpenFilterMobMenu","setSearch","setTypeCars","setHasAirConditioner","setHasFridge","setIsOpenModalAddCar","setIsGridView","setHasHeating","setHasSoundProofed","setIsOpenModalScan","handleSelect","position","zIndex","paddingBottom","IconButton","icon","IoScan","onClick","InputGroup","InputLeftElement","pointerEvents","IoSearch","Input","value","onChange","e","target","toUpperCase","placeholder","ListViewSwitcher","FaChevronUp","FaFilter","_hover","AddIcon","align","Menu","MenuButton","as","Button","rightIcon","ChevronDownIcon","MenuList","minW","MenuItem","TYPES_CAR","typeCar","index","Icon","boxSize","mr","Switch","colorScheme","isChecked","leftIcon","imageSrc","annotations","carList","setCarList","containerRef","useRef","console","log","container","current","length","async","dataCarList","Promise","all","detectedText","annotation","description","replace","result","getCarByName","item","error","fetchData","ref","src","alt","maxWidth","maxHeight","_car$annotation","_car$annotation$bound","vertices","boundingPoly","left","x","top","y","width","height","rotation","dx","dy","Math","atan2","PI","calculateRotation","transform","background","border","padding","borderLeftRadius","borderBottomRightRadius","right","borderTopRadius","onRecognized","webcamRef","image","setImage","setAnnotations","_Fragment","AnnotatedImage","bottom","backgroundColor","Webcam","audio","videoConstraints","facingMode","screenshotFormat","getScreenshot","_result$responses$","response","fetch","process","method","headers","body","JSON","stringify","requests","content","split","features","json","_","newAnnotations","responses","textAnnotations","alert","isOpen","onClose","allowedTexts","setAllowedTexts","document","createPortal","Modal","motionPreset","size","isCentered","scrollBehavior","ModalOverlay","ModalContent","mt","ModalHeader","ModalCloseButton","ModalBody","h","OCRScanner","text","pref","getElementById","MotionBox","motion","create","setDrivingStyle","startY","setStartY","filterMenuRef","handleClickOutside","event","contains","addEventListener","removeEventListener","initial","animate","onTouchStart","touches","clientY","onTouchEnd","endY","changedTouches","transition","duration","opacity","VStack","spacing","Checkbox","prev","bgColor","Cars","isOpenModalAddCar","isOpenModalScan","Helmet","Outlet","Container","maxW","FilterMobMenu","FilterPanel","CarsBox","ModalWrapper","AddCarForm","onSubmit","addsNewCar","formData","ModalScan"],"sourceRoot":""}